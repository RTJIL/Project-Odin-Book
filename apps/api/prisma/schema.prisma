// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(uuid()) @db.Uuid
  googleId String? @unique

  username  String   @unique @db.VarChar(255)
  password  String?
  email     String?
  avatarUrl String   @default("https://pzayzfkambqnvlzxqlbb.supabase.co/storage/v1/object/public/messenger-sm//account.png")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followers Follow[] @relation("following")
  following Follow[] @relation("followers")

  comments Comment[]
  posts    Post[]
  likes    Like[]
}

model Follow {
  id Int @id @default(autoincrement())

  follower   User   @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String @db.Uuid

  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String @db.Uuid

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Post {
  id        Int     @id @default(autoincrement())
  content   String?
  imgUrl    String?
  imgWidth  String?
  imgHeight String?

  comments Comment[]
  likes    Like[]

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())

  content String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  @@id([postId, userId])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
